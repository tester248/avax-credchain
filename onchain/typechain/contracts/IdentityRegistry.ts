/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IdentityRegistryInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "HR_ROLE()": FunctionFragment;
    "getEncryptedData(address,string)": FunctionFragment;
    "getEncryptedFields(address)": FunctionFragment;
    "getIdentity(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasEncryptedData(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "registerIdentity(address,string,string)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "storeEncryptedData(address,string,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateConsent(address,bool)": FunctionFragment;
    "updateIdentity(address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "HR_ROLE"
      | "getEncryptedData"
      | "getEncryptedFields"
      | "getIdentity"
      | "getRoleAdmin"
      | "grantRole"
      | "hasEncryptedData"
      | "hasRole"
      | "registerIdentity"
      | "renounceRole"
      | "revokeRole"
      | "storeEncryptedData"
      | "supportsInterface"
      | "updateConsent"
      | "updateIdentity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "HR_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEncryptedData",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedFields",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasEncryptedData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIdentity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeEncryptedData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConsent",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIdentity",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "HR_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedFields",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasEncryptedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeEncryptedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConsent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIdentity",
    data: BytesLike
  ): Result;

  events: {
    "ConsentUpdated(address,bool)": EventFragment;
    "EncryptedDataAccessed(address,address,string,uint256)": EventFragment;
    "EncryptedDataStored(address,string,uint256)": EventFragment;
    "IdentityRegistered(address,string,string)": EventFragment;
    "IdentityUpdated(address,string)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConsentUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EncryptedDataAccessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EncryptedDataStored"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IdentityRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IdentityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface ConsentUpdatedEventObject {
  user: string;
  consent: boolean;
}
export type ConsentUpdatedEvent = TypedEvent<
  [string, boolean],
  ConsentUpdatedEventObject
>;

export type ConsentUpdatedEventFilter = TypedEventFilter<ConsentUpdatedEvent>;

export interface EncryptedDataAccessedEventObject {
  user: string;
  accessor: string;
  fieldName: string;
  timestamp: BigNumber;
}
export type EncryptedDataAccessedEvent = TypedEvent<
  [string, string, string, BigNumber],
  EncryptedDataAccessedEventObject
>;

export type EncryptedDataAccessedEventFilter =
  TypedEventFilter<EncryptedDataAccessedEvent>;

export interface EncryptedDataStoredEventObject {
  user: string;
  fieldName: string;
  timestamp: BigNumber;
}
export type EncryptedDataStoredEvent = TypedEvent<
  [string, string, BigNumber],
  EncryptedDataStoredEventObject
>;

export type EncryptedDataStoredEventFilter =
  TypedEventFilter<EncryptedDataStoredEvent>;

export interface IdentityRegisteredEventObject {
  user: string;
  jurisdiction: string;
  ipfsCid: string;
}
export type IdentityRegisteredEvent = TypedEvent<
  [string, string, string],
  IdentityRegisteredEventObject
>;

export type IdentityRegisteredEventFilter =
  TypedEventFilter<IdentityRegisteredEvent>;

export interface IdentityUpdatedEventObject {
  user: string;
  ipfsCid: string;
}
export type IdentityUpdatedEvent = TypedEvent<
  [string, string],
  IdentityUpdatedEventObject
>;

export type IdentityUpdatedEventFilter = TypedEventFilter<IdentityUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface IdentityRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IdentityRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    HR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    getEncryptedData(
      user: PromiseOrValue<string>,
      fieldName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEncryptedFields(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getIdentity(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        jurisdiction: string;
        ipfsCid: string;
        consent: boolean;
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasEncryptedData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerIdentity(
      user: PromiseOrValue<string>,
      jurisdiction: PromiseOrValue<string>,
      ipfsCid: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeEncryptedData(
      user: PromiseOrValue<string>,
      fieldName: PromiseOrValue<string>,
      encryptedPayload: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateConsent(
      user: PromiseOrValue<string>,
      consent: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateIdentity(
      user: PromiseOrValue<string>,
      ipfsCid: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  HR_ROLE(overrides?: CallOverrides): Promise<string>;

  getEncryptedData(
    user: PromiseOrValue<string>,
    fieldName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getEncryptedFields(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getIdentity(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & {
      jurisdiction: string;
      ipfsCid: string;
      consent: boolean;
    }
  >;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasEncryptedData(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerIdentity(
    user: PromiseOrValue<string>,
    jurisdiction: PromiseOrValue<string>,
    ipfsCid: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeEncryptedData(
    user: PromiseOrValue<string>,
    fieldName: PromiseOrValue<string>,
    encryptedPayload: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateConsent(
    user: PromiseOrValue<string>,
    consent: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateIdentity(
    user: PromiseOrValue<string>,
    ipfsCid: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    HR_ROLE(overrides?: CallOverrides): Promise<string>;

    getEncryptedData(
      user: PromiseOrValue<string>,
      fieldName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getEncryptedFields(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getIdentity(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        jurisdiction: string;
        ipfsCid: string;
        consent: boolean;
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasEncryptedData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerIdentity(
      user: PromiseOrValue<string>,
      jurisdiction: PromiseOrValue<string>,
      ipfsCid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeEncryptedData(
      user: PromiseOrValue<string>,
      fieldName: PromiseOrValue<string>,
      encryptedPayload: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateConsent(
      user: PromiseOrValue<string>,
      consent: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIdentity(
      user: PromiseOrValue<string>,
      ipfsCid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ConsentUpdated(address,bool)"(
      user?: PromiseOrValue<string> | null,
      consent?: null
    ): ConsentUpdatedEventFilter;
    ConsentUpdated(
      user?: PromiseOrValue<string> | null,
      consent?: null
    ): ConsentUpdatedEventFilter;

    "EncryptedDataAccessed(address,address,string,uint256)"(
      user?: PromiseOrValue<string> | null,
      accessor?: PromiseOrValue<string> | null,
      fieldName?: PromiseOrValue<string> | null,
      timestamp?: null
    ): EncryptedDataAccessedEventFilter;
    EncryptedDataAccessed(
      user?: PromiseOrValue<string> | null,
      accessor?: PromiseOrValue<string> | null,
      fieldName?: PromiseOrValue<string> | null,
      timestamp?: null
    ): EncryptedDataAccessedEventFilter;

    "EncryptedDataStored(address,string,uint256)"(
      user?: PromiseOrValue<string> | null,
      fieldName?: PromiseOrValue<string> | null,
      timestamp?: null
    ): EncryptedDataStoredEventFilter;
    EncryptedDataStored(
      user?: PromiseOrValue<string> | null,
      fieldName?: PromiseOrValue<string> | null,
      timestamp?: null
    ): EncryptedDataStoredEventFilter;

    "IdentityRegistered(address,string,string)"(
      user?: PromiseOrValue<string> | null,
      jurisdiction?: null,
      ipfsCid?: null
    ): IdentityRegisteredEventFilter;
    IdentityRegistered(
      user?: PromiseOrValue<string> | null,
      jurisdiction?: null,
      ipfsCid?: null
    ): IdentityRegisteredEventFilter;

    "IdentityUpdated(address,string)"(
      user?: PromiseOrValue<string> | null,
      ipfsCid?: null
    ): IdentityUpdatedEventFilter;
    IdentityUpdated(
      user?: PromiseOrValue<string> | null,
      ipfsCid?: null
    ): IdentityUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    HR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getEncryptedData(
      user: PromiseOrValue<string>,
      fieldName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEncryptedFields(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIdentity(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasEncryptedData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerIdentity(
      user: PromiseOrValue<string>,
      jurisdiction: PromiseOrValue<string>,
      ipfsCid: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeEncryptedData(
      user: PromiseOrValue<string>,
      fieldName: PromiseOrValue<string>,
      encryptedPayload: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateConsent(
      user: PromiseOrValue<string>,
      consent: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateIdentity(
      user: PromiseOrValue<string>,
      ipfsCid: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEncryptedData(
      user: PromiseOrValue<string>,
      fieldName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEncryptedFields(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIdentity(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasEncryptedData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerIdentity(
      user: PromiseOrValue<string>,
      jurisdiction: PromiseOrValue<string>,
      ipfsCid: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeEncryptedData(
      user: PromiseOrValue<string>,
      fieldName: PromiseOrValue<string>,
      encryptedPayload: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateConsent(
      user: PromiseOrValue<string>,
      consent: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateIdentity(
      user: PromiseOrValue<string>,
      ipfsCid: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
